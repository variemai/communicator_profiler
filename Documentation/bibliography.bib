%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MPI applications %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@inproceedings{10.1145/3295500.3356176,
author = {Laguna, Ignacio and Marshall, Ryan and Mohror, Kathryn and Ruefenacht, Martin and Skjellum, Anthony and Sultana, Nawrin},
title = {A Large-Scale Study of MPI Usage in Open-Source HPC Applications},
year = {2019},
isbn = {9781450362290},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3295500.3356176},
doi = {10.1145/3295500.3356176},
abstract = {Understanding the state-of-the-practice in MPI usage is paramount for many aspects of supercomputing, including optimizing the communication of HPC applications and informing standardization bodies and HPC systems procurements regarding the most important MPI features. Unfortunately, no previous study has characterized the use of MPI on applications at a significant scale; previous surveys focus either on small data samples or on MPI jobs of specific HPC centers. This paper presents the first comprehensive study of MPI usage in applications. We survey more than one hundred distinct MPI programs covering a significantly large space of the population of MPI applications. We focus on understanding the characteristics of MPI usage with respect to the most used features, code complexity, and programming models and languages. Our study corroborates certain findings previously reported on smaller data samples and presents a number of interesting, previously un-reported insights.},
booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
articleno = {31},
numpages = {14},
keywords = {program analysis, applications survey, MPI},
location = {Denver, Colorado},
series = {SC '19}
}

@article{GROPP201998,
title = {Using node and socket information to implement MPI Cartesian topologies},
journal = {Parallel Computing},
volume = {85},
pages = {98-108},
year = {2019},
issn = {0167-8191},
doi = {https://doi.org/10.1016/j.parco.2019.01.001},
url = {https://www.sciencedirect.com/science/article/pii/S0167819118303156},
author = {William D. Gropp},
keywords = {Message passing, MPI, Process topology, Cartesian process topology},
abstract = {The MPI API provides support for Cartesian process topologies, including the option to reorder the processes to achieve better communication performance. But MPI implementations rarely provide anything useful for the reorder option, typically ignoring it. One argument made is that modern interconnects are fast enough that applications are less sensitive to the exact layout of processes onto the system. However, intranode communication performance is much greater than internode communication performance. In this paper, we show a simple approach that takes into account only information about which MPI processes are on the same node to provide a fast and effective implementation of the MPI Cartesian topology routine. While not optimal, this approach provides a significant improvement over all tested MPI implementations and provides an implementation that may be used as the default in any MPI implementation of MPI_Cart_create. We also explore the impact of taking into account the mapping of processes to processor chips or sockets, and show that this is both relatively easy to accomplish but provides only a small improvement in performance.}
}

@INPROCEEDINGS{1592864,
  author={Traff, J.L.},
  booktitle={SC '02: Proceedings of the 2002 ACM/IEEE Conference on Supercomputing},
  title={Implementing the MPI Process Topology Mechanism},
  year={2002},
  volume={},
  number={},
  pages={28-28},
  doi={10.1109/SC.2002.10045}}
