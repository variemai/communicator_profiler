#+TITLE: MPI Communicator Profiling Tool
#+OPTIONS: ^:nil num:nil
#+SETUPFILE: setup.conf
#+BIBLIOGRAPHY: bibliography plain
#+INCLUDE: code.inc
#+CALL: init()

* Overview
The main idea of this tool is to provide accurate information about the MPI Communicators via profiling with a low overhead.
** Specifications
1. Communicator related information (calls, tree)
2. Data traffic (Bytes sent) in every communicator
3. MPI communication primitives information in every communicator
* Installation
** Dependencies
1. MPI version bla bla bla
** Compile
1. Get the tool from here www.bla.org
2. Compile with bla
** Tests
Run the tests blablabla
* Usage
** Output
Output file name "profiler_data.csv". If this file exists it will be overwritten.
*** Header
- MPI Version and MPI Implementation
- Application name and arguments
- Number of processes
- Machine Name of Process 0
- Date of the Run
* Implementation
** Basic idea
- Keep data for each communicator using ~MPI_Comm_set_attr()~
  + This has worked so far but it has some issues with ~MPI_Comm_free()~
  + To solve these issues I have kept a local data structure with the communicators and their corresponding data
    + Since the data are *copied* in this local data structure ~MPI_Comm_free()~ is no longer an issue
- Communicator name prefix includes its ancestor
  + The name includes an id that is the number of communicators
** Supported Communicator Primitives
- MPI_Comm_split
- MPI_Comm_dup
- MPI_Comm_create
- MPI_Cart_create
- MPI_Cart_sub
** Unsupported Communicator Primitives
- MPI_Comm_create_group
** TODO Supported Communicator Primitives
- MPI_Graph_create
- MPI_Dist_graph_create
- MPI_Comm_idup
** Supported MPI Collective communication Primitives
- MPI_Barrier
- MPI_Ibarrier
- MPI_Gather
- MPI_Gatherv
- MPI_Scatter
- MPI_Scatterv
- MPI_Bcast
- MPI_Allreduce
- MPI_Allgather
- MPI_Allgatherv
- MPI_Alltoall
- MPI_Alltoallv
- MPI_Scan
- MPI_Exscan
- MPI_Scatter
- MPI_Scaterrv
** TODO Supported MPI Collective communication Primitives
- MPI_Reduce_scater
- MPI_Iallreduce
- MPI_Ibcast
- MPI_Ialltoall
- MPI_Iscatter
- MPI_Ibarrier
- MPI_Neighbor_allgather
- MPI_Neighbor_allgatherv
- MPI_Neighbor_alltoall
- MPI_Neighbor_alltoallv
- MPI_Neighbor_alltoallw
- MPI_Ineighbor_allgather
- MPI_Ineighbor_allgatherv
- MPI_Ineighbor_alltoall
- MPI_Ineighbor_alltoallv
- MPI_Ineighbor_alltoallw
** Supported MPI Point to Point Primitives
- MPI_Send
- MPI_Isend
- MPI_Recv
- MPI_Irecv
- MPI_Sendrecv
** TODO Supported MPI Point to Point Primitives
- MPI_Ssend
- MPI_Ssend_init
- MPI_Issend
** Other MPI calls
- MPI_Wait
- MPI_Waitall
** Communicator creator primitives profiling
The implementations of some of the communicator primitives is also included. I chose to present some of them just to give an idea of how this tool works.
*** Profiling MPI_Comm_create
*** Profiling MPI_Comm_split
Communicator suffix includes two distinct ids:
- The first id denotes the current number of communicators among all processes
- The second denotes the communicator after the split
There are two collective calls of ~MPI_Allreduce()~ in order to get the correct ids for the name. The first call synchronizes between the processes and get the maximum number. This way all processes agree on the first id of this communicator. Note that this call is done in the parent communicator. The second ~MPI_Allreduce()~ call is done in the newly created communicators where every processes sends its corresponding rank in the parent communicator and gets the minimum. This is allows the profiler to distinct between the newly created communicators. The second id of each of the new communicators is the minimum rank of the process in the parent communicator.
**** Code
#+INCLUDE: "../commprof.c" src c :lines "300-343"
* Output File Format
- Lines with =#@= contain information of how to read the output file. Lines described with =_l= denote a list of items
  - =#@metric_l= denotes the type of metric used for the specific line ("VOL,TIME,NCALLS")
  - =#@metric_type_l= denotes the unit for this metric (float,int)
  - =#@comm_l= list of communicator names
  - =#@call_l= list of MPI calls
  - =#@rank_start_l= list of start timestamp for each rank
  - =#@rank_end_l= list of end timestamp for each rank
- Format of a data line:
  "Rank", "Comm", "Call", "Type", "Val"
* Contribute
** How to add a new primitive for profiling
1. Increase the "NUM_OF_PRIMS" variable in "utils." file
2. Add the new primitive as enumerated type in "utils.h" file
3. Make sure that the enumerated type is the same with the char table "prim_names" in file "utils.c"
4. Add the wrapper code in "commprof.c" - use the other functions as a template
   1. Add the Fortran wrapper for intercepting Fortran code this is an issue with OpenMPI
* Future Work
** DONE Describe Cart Sub implementations
** DONE Add timing for primitives
** DONE Remove unnecessary parts of code
** DONE Free memory
** DONE Keep only the name in the communicator with Comm_set_attr
** DONE Cleanup code
** DONE How to add a new primitive
** DONE Add Recv and Irecv operations
