#+TITLE: MPI Communicator Profiling Tool
#+OPTIONS: ^:nil num:nil
#+SETUPFILE: setup.conf
#+BIBLIOGRAPHY: bibliography plain
#+INCLUDE: code.inc
#+CALL: init()


* Overview
The main idea of this tool is to provide accurate information about the MPI Communicators via profiling with low overhead.
** Specifications
1. Communicator related information (calls, tree)
2. Data traffic (Bytes sent) in every communicator
3. MPI communication primitives information in every communicator
* Installation
** Dependencies
1. MPI version bla bla bla
** Compile
1. Get the tool from here www.bla.org
2. Compile with bla
** Tests
Run the tests blablabla
* Usage
#+begin_src shell
echo "Techincal documentation using Emacs <3"
#+end_src
** Output
Output file name "profiler_stats.txt"
*** Header
- MPI Version and MPI Implementation
- Application name and arguments
- Number of processes
- Machine Name of Process 0
- Date of the Run
* Implementation
** Basic idea
- Keep data for each communicator using ~MPI_Comm_set_attr()~
  + This has worked so far but it has some issues with ~MPI_Comm_free()~
  + To solve these issues I have kept a local data structure with the communicators and their corresponding data
    + Since the data are *copied* in this local data structure ~MPI_Comm_free()~ is no longer an issue
- Communicator name prefix includes its ancestor
  + The name includes an id that is the number of communicators
** Supported Communicator Primitives
- MPI_Comm_split
- MPI_Comm_dup
- MPI_Comm_create
- MPI_Cart_create
- MPI_Cart_sub
** Unsupported Communicator Primitives
- MPI_Comm_create_group
** TODO Supported Communicator Primitives
- MPI_Graph_create
- MPI_Dist_graph_create
** Supported MPI Collective communication Primitives
** TODO Supported MPI Collective communication Primitives
- MPI_Barrier
- MPI_Ibarrier
- MPI_Gatherv
- MPI_Scatter
- MPI_Scatterv
** Supported MPI Point to Point Primitives
** Communicator creator primitives profiling
The implementations of some of the communicator primitives is also included. I chose to present some of them just to give an idea of how this tool works.
*** Profiling MPI_Comm_create
*** Profiling MPI_Comm_split
Communicator suffix includes two distinct ids:
- The first id denotes the current number of communicators among all processes
- The second denotes the communicator after the split
There are two collective calls of ~MPI_Allreduce()~ in order to get the correct ids for the name. The first call synchronizes between the processes and get the maximum number. This way all processes agree on the first id of this communicator. Note that this call is done in the parent communicator. The second ~MPI_Allreduce()~ call is done in the newly created communicators where every processes sends its corresponding rank in the parent communicator and gets the minimum. This is allows the profiler to distinct between the newly created communicators. The second id of each of the new communicators is the minimum rank of the process in the parent communicator.
**** Code
#+INCLUDE: "../commprof.c" src c :lines "300-343"
* Future Work
** TODO Describe Cart Sub implementations
** TODO Remove unnecessary parts of code
** TODO Free memory
** HOLD Keep only the name in the communicator with Comm_set_attr
** TODO Cleanup code
** TODO How to add a new primitive
