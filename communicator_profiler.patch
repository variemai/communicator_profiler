diff --git a/commprof.c b/commprof.c
index 6f7a34a..ee7f1c0 100644
--- a/commprof.c
+++ b/commprof.c
@@ -45,7 +45,7 @@ namedel(MPI_Comm comm, int keyval, void *attr, void *s)
 }
 
 static int
-namekey()
+namekey(void)
 {
   // hidden key value for type attributes
   static int namekeyval = MPI_KEYVAL_INVALID;
@@ -183,15 +183,18 @@ int
 _MPI_Init(int *argc, char ***argv){
     int ret,rank,size;
     int i,rc;
+    int nb_local_comms;
     prof_attrs *communicator;
     ret = PMPI_Init(argc, argv);
     PMPI_Comm_rank(MPI_COMM_WORLD, &rank);
     PMPI_Comm_size(MPI_COMM_WORLD, &size);
     /* communicators =(MPI_Comm*) malloc(sizeof(MPI_Comm)*size*4); */
     if ( size*4 > 512 )
-        local_comms = (prof_attrs**) malloc (sizeof(prof_attrs*)*size*4);
+        nb_local_comms = size*4;
     else
-        local_comms = (prof_attrs**) malloc (sizeof(prof_attrs*)*512);
+        nb_local_comms = 512;
+    local_comms = (prof_attrs**) malloc (sizeof(prof_attrs*)*nb_local_comms);
+    memset(local_comms, 0, sizeof(prof_attrs*)*nb_local_comms);
 
     /* world_sz = size*size; */
     request_tab = Table_new(1024, NULL, NULL);
@@ -1443,8 +1446,7 @@ MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
             void *recvbuf, const int *recvcounts, const int *displs,
             MPI_Datatype recvtype, int root, MPI_Comm comm)
 {
-    int ret,sum,rank;
-    const int *tmp;
+    int ret,sum,rank,comm_size;
     double t_elapsed;
     if ( prof_enabled == 1 ){
         t_elapsed = MPI_Wtime();
@@ -1462,10 +1464,9 @@ MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
 
         PMPI_Comm_rank(comm, &rank);
         if ( rank == root ){
-            tmp = recvcounts;
-            while ( tmp ){
-                sum += *tmp;
-                tmp++;
+            PMPI_Comm_size(comm, &comm_size);
+            for (int i = 0; i < comm_size; i++){
+                sum += recvcounts[i];
             }
         }
         else{
@@ -1509,10 +1510,9 @@ MPI_Scatterv(const void *sendbuf, const int *sendcounts, const int *displs,
              MPI_Datatype recvtype, int root, MPI_Comm comm)
 {
 
-    int ret,rank;
+    int ret,rank,comm_size;
     uint64_t sum;
     double t_elapsed;
-    const int *tmp;
     if ( prof_enabled == 1 ){
         sum = 0;
         t_elapsed = MPI_Wtime();
@@ -1522,10 +1522,9 @@ MPI_Scatterv(const void *sendbuf, const int *sendcounts, const int *displs,
         t_elapsed = MPI_Wtime() - t_elapsed;
         PMPI_Comm_rank(comm, &rank);
         if ( rank == root ){
-            tmp = sendcounts;
-            while ( tmp ){
-                sum += *tmp;
-                tmp++;
+            PMPI_Comm_size(comm, &comm_size);
+            for (int i = 0; i < comm_size; i++){
+                sum += sendcounts[i];
             }
         }
         else{
@@ -2050,7 +2049,7 @@ void F77_MPI_REDUCE_SCATTER(const void  *sendbuf, void  *recvbuf, const int *rec
 int
 MPI_Comm_free(MPI_Comm *comm)
 {
-    int ret,flag,i,j;
+    int ret,flag,i;
     prof_attrs *com_info;
     PMPI_Comm_get_attr(*comm, namekey(), &com_info, &flag);
     if ( flag ){
@@ -2068,7 +2067,7 @@ MPI_Comm_free(MPI_Comm *comm)
         /* local_comms[i]->msgs = com_info->msgs; */
         /* local_comms[i]->size = com_info->size; */
         /* strcpy(local_comms[i]->name,com_info->name); */
-        /* for (j = 0; j < NUM_OF_PRIMS; j++) { */
+        /* for (int j = 0; j < NUM_OF_PRIMS; j++) { */
         /*     local_comms[i]->prims[j] = com_info->prims[j]; */
         /*     local_comms[i]->prim_bytes[j] = com_info->prim_bytes[j]; */
         /*     local_comms[i]->time_info[j] = com_info->time_info[j]; */
@@ -2092,7 +2091,7 @@ F77_MPI_COMM_FREE(MPI_Fint *comm, MPI_Fint *ierr)
 }
 
 static int
-_Finalize()
+_Finalize(void)
 {
     FILE *fp;
     prof_attrs *array;
@@ -2110,8 +2109,9 @@ _Finalize()
     int *sizes,*usizes;
     char version[MPI_MAX_LIBRARY_VERSION_STRING];
     char proc_name[MPI_MAX_PROCESSOR_NAME];
-    char *proc_names,*ptr;
-    double *alltimes;
+    char *proc_names = NULL;
+    char *ptr;
+    double *alltimes = NULL;
     total_time = MPI_Wtime()-total_time;
 
     PMPI_Comm_rank(MPI_COMM_WORLD, &rank);
@@ -2211,8 +2211,8 @@ _Finalize()
 
         time_t date;
         char *tmp;
-        fp = fopen("profiler_data.csv","w");
         names = ( char**)malloc(sizeof(char*)*num_of_comms*size);
+        memset(names, 0, sizeof(char*)*num_of_comms*size);
         unames = (char **) malloc (sizeof(char*)*num_of_comms*size);
         bytes = (uint64_t *) malloc (sizeof(uint64_t )*num_of_comms*size);
         msgs = (uint64_t *) malloc (sizeof(uint64_t )*num_of_comms*size);
@@ -2234,6 +2234,14 @@ _Finalize()
         fpp = fopen("per_process_data.csv", "w");
         ptr = proc_names;
         PMPI_Get_library_version(version, &resultlen);
+        /* Remove line breaks in MPI version string, as it may create bugs during parsing. */
+        for (i = 0; i < strlen(version); i++)
+        {
+            if(version[i] == '\n')
+            {
+                version[i] = ' ';
+            }
+        }
         fprintf(fpp, "#'MPI LIBRARY' '%s'\n",version);
         fprintf(fpp, "#'Processes' '%d'\n",size);
         fprintf(fpp, "#'Run command' ");
@@ -2261,10 +2269,10 @@ _Finalize()
             tmp++;
         }
         fprintf(fpp, "'\n");
-        fprintf(fpp,"#'Mapping:'");
+        fprintf(fpp,"#'Mapping:");
         for ( i =0; i<size; i++ ){
             if ( ptr != NULL ){
-                snprintf(proc_name, MPI_MAX_PROCESSOR_NAME, ptr);
+                snprintf(proc_name, MPI_MAX_PROCESSOR_NAME, "%s", ptr);
             }
             if ( i != size-1 )
                 fprintf(fpp, "%d %s,",i,proc_name);
@@ -2334,6 +2342,7 @@ _Finalize()
         total = j;
 
         if ( env_var  && (strcmp(env_var, "p") == 0 )){
+            fp = fopen("profiler_data.csv","w");
             ubytes = (uint64_t *) malloc (sizeof(uint64_t )*total);
             umsgs = (uint64_t *) malloc (sizeof(uint64_t )*total);
             usizes = (int *) malloc (sizeof(int)*total);
@@ -2399,7 +2408,6 @@ _Finalize()
                 fprintf(stderr, "Failed to open output file: profiler_stats.txt\n");
                 mcpt_abort("Aborting\n");
             }
-            PMPI_Get_library_version(version, &resultlen);
             fprintf(fp, "#'MPI LIBRARY' '%s'\n",version);
             fprintf(fp, "#'Processes' '%d'\n",size);
             fprintf(fp, "#'Run command' ");
@@ -2478,6 +2486,8 @@ _Finalize()
         free(msgs);
         free(prims);
         free(time_info);
+        free(alltimes);
+        free(proc_names);
     }
 
     PMPI_Type_free(&profiler_data);
diff --git a/utils.c b/utils.c
index 556d575..a27cb8d 100644
--- a/utils.c
+++ b/utils.c
@@ -54,7 +54,7 @@ void mcpt_abort (char *fmt, ...){
   PMPI_Abort(MPI_COMM_WORLD, -1);
 }
 
-char *get_appname (){
+char *get_appname (void){
   int pid, exelen, insize = 256;
   char *inbuf = NULL, file[256];
 
@@ -104,19 +104,18 @@ getProcCmdLine (int *ac, char **av)
   if (infile != NULL){
     while (!feof (infile)){
       inbuf = malloc (MAX_ARG_STRING_SIZE);
+      memset(inbuf, 0, MAX_ARG_STRING_SIZE);
       if (fread (inbuf, 1, MAX_ARG_STRING_SIZE, infile) > 0){
         arg_ptr = inbuf;
-        while (*arg_ptr != '\0'){
+        while (*arg_ptr != 0){
           av[i] = strdup (arg_ptr);
           arg_ptr += strlen (av[i]) + 1;
           i++;
         }
       }
+      free(inbuf);
     }
     *ac = i;
-    if(inbuf != NULL ){
-      free (inbuf);
-    }
     fclose (infile);
   }
   else{
